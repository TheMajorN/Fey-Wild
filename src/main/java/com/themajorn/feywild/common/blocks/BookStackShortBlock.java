package com.themajorn.feywild.common.blocks;

import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.HorizontalBlock;
import net.minecraft.item.BlockItemUseContext;
import net.minecraft.state.StateContainer;
import net.minecraft.util.Mirror;
import net.minecraft.util.Rotation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.shapes.IBooleanFunction;
import net.minecraft.util.math.shapes.ISelectionContext;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.IBlockReader;

import javax.annotation.Nullable;
import java.util.stream.Stream;

public class BookStackShortBlock extends HorizontalBlock {

    public static final VoxelShape SHAPE_N = Stream.of(
            Block.box(4.850000000000001, 4.8500000000000005, 4.249999999999998, 10.900000000000002, 5.15, 11.450000000000001),
            Block.box(10.900000000000002, 4.700000000000001, 4.049999999999999, 11.000000000000002, 5.3500000000000005, 11.55),
            Block.box(4.650000000000002, 5.150000000000001, 4.049999999999999, 10.900000000000002, 5.350000000000001, 11.55),
            Block.box(4.650000000000002, 4.7, 4.049999999999999, 10.900000000000002, 4.9, 11.55),
            Block.box(4.904748577940802, 3.350000000000001, 3.3538339246915925, 11.454748577940801, 4.549999999999999, 11.553833924691594),
            Block.box(11.454748577940801, 3.200000000000001, 3.153833924691595, 11.554748577940801, 4.65, 11.653833924691595),
            Block.box(4.704748577940803, 4.449999999999999, 3.153833924691595, 11.454748577940801, 4.65, 11.653833924691595),
            Block.box(4.704748577940803, 3.2000000000000015, 3.153833924691595, 11.454748577940801, 3.400000000000001, 11.653833924691595),
            Block.box(4.300000000000001, 2.65, 3.6499999999999986, 11.100000000000001, 2.9499999999999997, 11.85),
            Block.box(11.100000000000001, 2.45, 3.4499999999999993, 11.200000000000001, 3.1500000000000004, 11.95),
            Block.box(4.100000000000001, 2.9499999999999997, 3.4499999999999993, 11.100000000000001, 3.15, 11.95),
            Block.box(4.100000000000001, 2.4499999999999997, 3.4499999999999993, 11.100000000000001, 2.7, 11.95),
            Block.box(3.9376817123716563, 6.550000000000001, 4.486481678838224, 10.487681712371662, 7.850000000000001, 12.686481678838224),
            Block.box(10.487681712371662, 6.400000000000001, 4.286481678838225, 10.587681712371662, 8, 12.786481678838223),
            Block.box(3.737681712371657, 7.800000000000001, 4.286481678838225, 10.487681712371662, 8.000000000000002, 12.786481678838223),
            Block.box(3.737681712371657, 6.4, 4.286481678838225, 10.487681712371662, 6.6000000000000005, 12.786481678838223),
            Block.box(4.463602276204249, 1.15, 4.442934709624396, 11.01360227620425, 2.3499999999999996, 12.642934709624397),
            Block.box(11.01360227620425, 0.9500000000000002, 4.242934709624397, 11.113602276204249, 2.45, 12.742934709624397),
            Block.box(4.263602276204249, 2.25, 4.242934709624397, 11.01360227620425, 2.45, 12.742934709624397),
            Block.box(4.263602276204249, 0.95, 4.242934709624397, 11.01360227620425, 1.2, 12.742934709624397),
            Block.box(4.230777458996119, 5.550000000000002, 3.441493240078394, 11.03077745899612, 6.250000000000001, 12.141493240078393),
            Block.box(11.030777458996122, 5.350000000000001, 3.2414932400783947, 11.130777458996121, 6.350000000000001, 12.241493240078393),
            Block.box(4.03077745899612, 6.150000000000001, 3.2414932400783947, 11.03077745899612, 6.350000000000001, 12.241493240078393),
            Block.box(4.03077745899612, 5.350000000000001, 3.2414932400783947, 11.03077745899612, 5.600000000000001, 12.241493240078393),
            Block.box(4.699999999999999, 0.1499999999999999, 3.1999999999999993, 11.5, 0.8499999999999999, 11.9),
            Block.box(11.5, -1.1102230246251565e-16, 3, 11.6, 0.95, 12),
            Block.box(4.5, 0.75, 3, 11.5, 0.95, 12),
            Block.box(4.5, 0, 3, 11.5, 0.19999999999999996, 12)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).get();
    public static final VoxelShape SHAPE_E = Stream.of(
            Block.box(4.197215310656453, 4.8500000000000005, 4.5504329132494465, 11.397215310656456, 5.15, 10.600432913249447),
            Block.box(4.097215310656454, 4.700000000000001, 10.600432913249447, 11.597215310656456, 5.3500000000000005, 10.700432913249447),
            Block.box(4.097215310656454, 5.150000000000001, 4.350432913249447, 11.597215310656456, 5.350000000000001, 10.600432913249447),
            Block.box(4.097215310656454, 4.7, 4.350432913249447, 11.597215310656456, 4.9, 10.600432913249447),
            Block.box(4.093381385964861, 3.350000000000001, 4.6051814911902476, 12.293381385964862, 4.549999999999999, 11.155181491190246),
            Block.box(3.9933813859648595, 3.200000000000001, 11.155181491190246, 12.49338138596486, 4.65, 11.255181491190246),
            Block.box(3.9933813859648595, 4.449999999999999, 4.405181491190248, 12.49338138596486, 4.65, 11.155181491190246),
            Block.box(3.9933813859648595, 3.2000000000000015, 4.405181491190248, 12.49338138596486, 3.400000000000001, 11.155181491190246),
            Block.box(3.797215310656455, 2.65, 4.000432913249446, 11.997215310656456, 2.9499999999999997, 10.800432913249447),
            Block.box(3.697215310656455, 2.45, 10.800432913249447, 12.197215310656455, 3.1500000000000004, 10.900432913249446),
            Block.box(3.697215310656455, 2.9499999999999997, 3.8004329132494465, 12.197215310656455, 3.15, 10.800432913249447),
            Block.box(3.697215310656455, 2.4499999999999997, 3.8004329132494465, 12.197215310656455, 2.7, 10.800432913249447),
            Block.box(2.960733631818231, 6.550000000000001, 3.6381146256211014, 11.16073363181823, 7.850000000000001, 10.188114625621107),
            Block.box(2.8607336318182313, 6.400000000000001, 10.188114625621107, 11.36073363181823, 8, 10.288114625621107),
            Block.box(2.8607336318182313, 7.800000000000001, 3.438114625621102, 11.36073363181823, 8.000000000000002, 10.188114625621107),
            Block.box(2.8607336318182313, 6.4, 3.438114625621102, 11.36073363181823, 6.6000000000000005, 10.188114625621107),
            Block.box(3.0042806010320575, 1.15, 4.164035189453694, 11.204280601032059, 2.3499999999999996, 10.714035189453694),
            Block.box(2.904280601032058, 0.9500000000000002, 10.714035189453694, 11.404280601032058, 2.45, 10.814035189453694),
            Block.box(2.904280601032058, 2.25, 3.9640351894536945, 11.404280601032058, 2.45, 10.714035189453694),
            Block.box(2.904280601032058, 0.95, 3.9640351894536945, 11.404280601032058, 1.2, 10.714035189453694),
            Block.box(3.505722070578061, 5.550000000000002, 3.9312103722455642, 12.20572207057806, 6.250000000000001, 10.731210372245565),
            Block.box(3.4057220705780615, 5.350000000000001, 10.731210372245567, 12.40572207057806, 6.350000000000001, 10.831210372245566),
            Block.box(3.4057220705780615, 6.150000000000001, 3.731210372245565, 12.40572207057806, 6.350000000000001, 10.731210372245565),
            Block.box(3.4057220705780615, 5.350000000000001, 3.731210372245565, 12.40572207057806, 5.600000000000001, 10.731210372245565),
            Block.box(3.747215310656454, 0.1499999999999999, 4.400432913249444, 12.447215310656455, 0.8499999999999999, 11.200432913249445),
            Block.box(3.6472153106564544, -1.1102230246251565e-16, 11.200432913249445, 12.647215310656454, 0.95, 11.300432913249445),
            Block.box(3.6472153106564544, 0.75, 4.200432913249445, 12.647215310656454, 0.95, 11.200432913249445),
            Block.box(3.6472153106564544, 0, 4.200432913249445, 12.647215310656454, 0.19999999999999996, 11.200432913249445)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).get();
    public static final VoxelShape SHAPE_S = Stream.of(
            Block.box(5.046782397407007, 4.8500000000000005, 4.1476482239058985, 11.096782397407008, 5.15, 11.347648223905901),
            Block.box(4.9467823974070075, 4.700000000000001, 4.047648223905899, 5.046782397407007, 5.3500000000000005, 11.5476482239059),
            Block.box(5.046782397407007, 5.150000000000001, 4.047648223905899, 11.296782397407007, 5.350000000000001, 11.5476482239059),
            Block.box(5.046782397407007, 4.7, 4.047648223905899, 11.296782397407007, 4.9, 11.5476482239059),
            Block.box(4.492033819466208, 3.350000000000001, 4.043814299214306, 11.042033819466207, 4.549999999999999, 12.243814299214307),
            Block.box(4.392033819466208, 3.200000000000001, 3.9438142992143046, 4.492033819466208, 4.65, 12.443814299214305),
            Block.box(4.492033819466208, 4.449999999999999, 3.9438142992143046, 11.242033819466206, 4.65, 12.443814299214305),
            Block.box(4.492033819466208, 3.2000000000000015, 3.9438142992143046, 11.242033819466206, 3.400000000000001, 12.443814299214305),
            Block.box(4.846782397407008, 2.65, 3.7476482239059, 11.646782397407009, 2.9499999999999997, 11.947648223905901),
            Block.box(4.746782397407008, 2.45, 3.6476482239059003, 4.846782397407008, 3.1500000000000004, 12.1476482239059),
            Block.box(4.846782397407008, 2.9499999999999997, 3.6476482239059003, 11.846782397407008, 3.15, 12.1476482239059),
            Block.box(4.846782397407008, 2.4499999999999997, 3.6476482239059003, 11.846782397407008, 2.7, 12.1476482239059),
            Block.box(5.459100685035347, 6.550000000000001, 2.911166545067676, 12.009100685035353, 7.850000000000001, 11.111166545067675),
            Block.box(5.359100685035347, 6.400000000000001, 2.8111665450676764, 5.459100685035347, 8, 11.311166545067675),
            Block.box(5.459100685035347, 7.800000000000001, 2.8111665450676764, 12.209100685035352, 8.000000000000002, 11.311166545067675),
            Block.box(5.459100685035347, 6.4, 2.8111665450676764, 12.209100685035352, 6.6000000000000005, 11.311166545067675),
            Block.box(4.93318012120276, 1.15, 2.9547135142815026, 11.48318012120276, 2.3499999999999996, 11.154713514281504),
            Block.box(4.83318012120276, 0.9500000000000002, 2.854713514281503, 4.93318012120276, 2.45, 11.354713514281503),
            Block.box(4.93318012120276, 2.25, 2.854713514281503, 11.68318012120276, 2.45, 11.354713514281503),
            Block.box(4.93318012120276, 0.95, 2.854713514281503, 11.68318012120276, 1.2, 11.354713514281503),
            Block.box(4.9160049384108895, 5.550000000000002, 3.4561549838275063, 11.71600493841089, 6.250000000000001, 12.156154983827506),
            Block.box(4.816004938410888, 5.350000000000001, 3.3561549838275067, 4.916004938410888, 6.350000000000001, 12.356154983827505),
            Block.box(4.9160049384108895, 6.150000000000001, 3.3561549838275067, 11.91600493841089, 6.350000000000001, 12.356154983827505),
            Block.box(4.9160049384108895, 5.350000000000001, 3.3561549838275067, 11.91600493841089, 5.600000000000001, 12.356154983827505),
            Block.box(4.446782397407009, 0.1499999999999999, 3.697648223905899, 11.24678239740701, 0.8499999999999999, 12.3976482239059),
            Block.box(4.34678239740701, -1.1102230246251565e-16, 3.5976482239058996, 4.446782397407009, 0.95, 12.5976482239059),
            Block.box(4.446782397407009, 0.75, 3.5976482239058996, 11.44678239740701, 0.95, 12.5976482239059),
            Block.box(4.446782397407009, 0, 3.5976482239058996, 11.44678239740701, 0.19999999999999996, 12.5976482239059)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).get();
    public static final VoxelShape SHAPE_W = Stream.of(
            Block.box(4.549567086750553, 4.8500000000000005, 4.997215310656452, 11.749567086750556, 5.15, 11.047215310656453),
            Block.box(4.349567086750554, 4.700000000000001, 4.897215310656453, 11.849567086750556, 5.3500000000000005, 4.997215310656452),
            Block.box(4.349567086750554, 5.150000000000001, 4.997215310656452, 11.849567086750556, 5.350000000000001, 11.247215310656452),
            Block.box(4.349567086750554, 4.7, 4.997215310656452, 11.849567086750556, 4.9, 11.247215310656452),
            Block.box(3.6534010114421474, 3.350000000000001, 4.442466732715653, 11.853401011442148, 4.549999999999999, 10.992466732715652),
            Block.box(3.45340101144215, 3.200000000000001, 4.342466732715653, 11.95340101144215, 4.65, 4.442466732715653),
            Block.box(3.45340101144215, 4.449999999999999, 4.442466732715653, 11.95340101144215, 4.65, 11.192466732715651),
            Block.box(3.45340101144215, 3.2000000000000015, 4.442466732715653, 11.95340101144215, 3.400000000000001, 11.192466732715651),
            Block.box(3.9495670867505535, 2.65, 4.797215310656453, 12.149567086750555, 2.9499999999999997, 11.597215310656454),
            Block.box(3.749567086750554, 2.45, 4.697215310656453, 12.249567086750554, 3.1500000000000004, 4.797215310656453),
            Block.box(3.749567086750554, 2.9499999999999997, 4.797215310656453, 12.249567086750554, 3.15, 11.797215310656453),
            Block.box(3.749567086750554, 2.4499999999999997, 4.797215310656453, 12.249567086750554, 2.7, 11.797215310656453),
            Block.box(4.786048765588779, 6.550000000000001, 5.409533598284792, 12.986048765588778, 7.850000000000001, 11.959533598284798),
            Block.box(4.58604876558878, 6.400000000000001, 5.309533598284792, 13.086048765588778, 8, 5.409533598284792),
            Block.box(4.58604876558878, 7.800000000000001, 5.409533598284792, 13.086048765588778, 8.000000000000002, 12.159533598284797),
            Block.box(4.58604876558878, 6.4, 5.409533598284792, 13.086048765588778, 6.6000000000000005, 12.159533598284797),
            Block.box(4.742501796374951, 1.15, 4.883613034452205, 12.942501796374952, 2.3499999999999996, 11.433613034452206),
            Block.box(4.542501796374951, 0.9500000000000002, 4.783613034452205, 13.042501796374951, 2.45, 4.883613034452205),
            Block.box(4.542501796374951, 2.25, 4.883613034452205, 13.042501796374951, 2.45, 11.633613034452205),
            Block.box(4.542501796374951, 0.95, 4.883613034452205, 13.042501796374951, 1.2, 11.633613034452205),
            Block.box(3.741060326828949, 5.550000000000002, 4.866437851660335, 12.441060326828948, 6.250000000000001, 11.666437851660335),
            Block.box(3.5410603268289496, 5.350000000000001, 4.766437851660333, 12.541060326828948, 6.350000000000001, 4.866437851660333),
            Block.box(3.5410603268289496, 6.150000000000001, 4.866437851660335, 12.541060326828948, 6.350000000000001, 11.866437851660335),
            Block.box(3.5410603268289496, 5.350000000000001, 4.866437851660335, 12.541060326828948, 5.600000000000001, 11.866437851660335),
            Block.box(3.499567086750554, 0.1499999999999999, 4.397215310656454, 12.199567086750555, 0.8499999999999999, 11.197215310656455),
            Block.box(3.299567086750555, -1.1102230246251565e-16, 4.297215310656455, 12.299567086750555, 0.95, 4.397215310656454),
            Block.box(3.299567086750555, 0.75, 4.397215310656454, 12.299567086750555, 0.95, 11.397215310656454),
            Block.box(3.299567086750555, 0, 4.397215310656454, 12.299567086750555, 0.19999999999999996, 11.397215310656454)
    ).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).get();

    public BookStackShortBlock(Properties properties) {
        super(properties);
    }

    @Override
    protected void createBlockStateDefinition(StateContainer.Builder<Block, BlockState> builder) {
        builder.add(HorizontalBlock.FACING);
    }

    @Override
    public VoxelShape getShape(BlockState state, IBlockReader reader, BlockPos p_2pos0053_3_, ISelectionContext context) {
        switch (state.getValue(HorizontalBlock.FACING)) {
            case EAST:
                return SHAPE_E;
            case SOUTH:
                return SHAPE_S;
            case WEST:
                return SHAPE_W;
            default:
                return SHAPE_N;
        }
    }

    @Nullable
    @Override
    public BlockState getStateForPlacement(BlockItemUseContext context) {
        return this.defaultBlockState().setValue(HorizontalBlock.FACING, context.getHorizontalDirection().getOpposite());
    }

    @Override
    public BlockState rotate(BlockState state, Rotation rotation) {
        return state.setValue(HorizontalBlock.FACING, rotation.rotate(state.getValue(HorizontalBlock.FACING)));
    }

    @Override
    public BlockState mirror(BlockState state, Mirror mirror) {
        return state.rotate(mirror.getRotation(state.getValue(HorizontalBlock.FACING)));
    }
}
